stages:
  - test
  - build
  - deploy
  - notify

variables:
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"
  RUST_VERSION: "1.70"

.test_template: &test_template
  stage: test
  script:
    - |
      if [ -f package.json ]; then
        npm ci
        npm test
      fi
      if [ -f requirements.txt ]; then
        pip install -r requirements.txt
        pytest
      fi
      if [ -f Cargo.toml ]; then
        cargo test
      fi
      if command -v pak; then
        pak scan . --platform all
      fi

test:node:
  <<: *test_template
  image: node:$NODE_VERSION
  only:
    changes:
      - package.json
      - package-lock.json
      - "**/*.js"
      - "**/*.ts"

test:python:
  <<: *test_template
  image: python:$PYTHON_VERSION
  only:
    changes:
      - requirements.txt
      - setup.py
      - pyproject.toml
      - "**/*.py"

test:rust:
  <<: *test_template
  image: rust:$RUST_VERSION
  only:
    changes:
      - Cargo.toml
      - Cargo.lock
      - "**/*.rs"

build:
  stage: build
  image: alpine:latest
  script:
    - apk add --no-cache curl bash
    - curl -sSL https://pak.sh/install | bash
    - pak build . --version $CI_COMMIT_TAG
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  only:
    - tags

deploy:npm:
  stage: deploy
  image: node:$NODE_VERSION
  script:
    - curl -sSL https://pak.sh/install | bash
    - pak deploy . --platform npm --version $CI_COMMIT_TAG
  environment:
    name: production
  only:
    - tags
  when: manual

deploy:pypi:
  stage: deploy
  image: python:$PYTHON_VERSION
  script:
    - curl -sSL https://pak.sh/install | bash
    - pak deploy . --platform pypi --version $CI_COMMIT_TAG
  environment:
    name: production
  only:
    - tags
  when: manual

notify:success:
  stage: notify
  script:
    - echo "Deployment successful: $CI_COMMIT_TAG"
  only:
    - tags
  when: on_success

notify:failure:
  stage: notify
  script:
    - echo "Deployment failed: $CI_COMMIT_TAG"
  only:
    - tags
  when: on_failure

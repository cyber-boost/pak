#!/bin/bash
# Comprehensive Vulnerability Scanner
# Integrates with PAK security module for multi-platform vulnerability detection

set -euo pipefail

# Source PAK configuration
PAK_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
source "$PAK_DIR/pak.sh"

# Scanner configuration
SCANNER_VERSION="1.0.0"
SCAN_TIMEOUT=300
MAX_CONCURRENT_SCANS=5

# Logging
log() {
    local level="$1"
    shift
    local message="$*"
    echo "[$(date -u +"%Y-%m-%dT%H:%M:%SZ")] [$level] $message" >> "$PAK_LOGS_DIR/security/vulnerability-scanner.log"
}

# Initialize scanner
init_scanner() {
    log INFO "Initializing vulnerability scanner v$SCANNER_VERSION"
    
    # Create scan directories
    mkdir -p "$PAK_DATA_DIR/security/scans"
    mkdir -p "$PAK_LOGS_DIR/security"
    
    # Check for required tools
    check_required_tools
    
    log INFO "Scanner initialized successfully"
}

# Check required tools
check_required_tools() {
    local missing_tools=()
    
    # Check for jq (required for JSON processing)
    if ! command -v jq &>/dev/null; then
        missing_tools+=("jq")
    fi
    
    # Check for curl (required for API calls)
    if ! command -v curl &>/dev/null; then
        missing_tools+=("curl")
    fi
    
    # Check for git (required for repository scanning)
    if ! command -v git &>/dev/null; then
        missing_tools+=("git")
    fi
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        log ERROR "Missing required tools: ${missing_tools[*]}"
        echo "Please install the following tools: ${missing_tools[*]}"
        exit 1
    fi
}

# Main scan function
scan_package() {
    local package_path="$1"
    local scan_type="${2:-comprehensive}"
    local output_format="${3:-json}"
    
    log INFO "Starting scan for: $package_path (type: $scan_type)"
    
    local scan_id=$(date +%s)
    local scan_dir="$PAK_DATA_DIR/security/scans/$scan_id"
    mkdir -p "$scan_dir"
    
    # Initialize scan report
    local report_file="$scan_dir/scan-report.json"
    init_scan_report "$report_file" "$package_path" "$scan_type"
    
    # Change to package directory
    cd "$package_path"
    
    # Run platform-specific scans
    scan_npm_packages "$report_file"
    scan_python_packages "$report_file"
    scan_rust_packages "$report_file"
    scan_go_packages "$report_file"
    
    # Run additional scans for comprehensive mode
    if [[ "$scan_type" == "comprehensive" ]]; then
        scan_secrets "$report_file"
        scan_licenses "$report_file"
        scan_dependencies "$report_file"
        scan_configurations "$report_file"
    fi
    
    # Generate summary
    generate_scan_summary "$report_file"
    
    # Output results
    output_scan_results "$report_file" "$output_format"
    
    log INFO "Scan completed: $scan_id"
    echo "$scan_id"
}

# Initialize scan report
init_scan_report() {
    local report_file="$1"
    local package_path="$2"
    local scan_type="$3"
    
    cat > "$report_file" << EOF
{
    "scan_id": "$(date +%s)",
    "package_path": "$package_path",
    "scan_type": "$scan_type",
    "scan_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
    "scanner_version": "$SCANNER_VERSION",
    "vulnerabilities": [],
    "secrets": [],
    "license_issues": [],
    "dependency_issues": [],
    "configuration_issues": [],
    "summary": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0,
        "total": 0
    },
    "recommendations": []
}
EOF
}

# Scan NPM packages
scan_npm_packages() {
    local report_file="$1"
    
    if [[ -f "package.json" ]] && command -v npm &>/dev/null; then
        log INFO "Scanning NPM packages..."
        
        # Run npm audit
        local audit_output=$(npm audit --json 2>/dev/null || echo '{"vulnerabilities":{}}')
        
        # Parse vulnerabilities
        echo "$audit_output" | jq -r '.vulnerabilities | to_entries[] | {
            package: .key,
            severity: .value.severity,
            title: .value.title,
            description: .value.description,
            url: .value.url,
            platform: "npm",
            cve: .value.cves?[0],
            cvss_score: .value.cvss_score,
            recommendation: .value.recommendation,
            scan_date: "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
        }' | jq -s '.' | \
        jq --argjson vulns - '.vulnerabilities += $vulns' "$report_file" > temp.json && \
        mv temp.json "$report_file"
        
        # Check for outdated packages
        local outdated_output=$(npm outdated --json 2>/dev/null || echo '{}')
        echo "$outdated_output" | jq -r 'to_entries[] | {
            package: .key,
            current: .value.current,
            wanted: .value.wanted,
            latest: .value.latest,
            issue: "outdated_dependency",
            severity: "medium",
            platform: "npm",
            recommendation: "Update to version " + .value.latest,
            scan_date: "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
        }' | jq -s '.' | \
        jq --argjson issues - '.dependency_issues += $issues' "$report_file" > temp.json && \
        mv temp.json "$report_file"
    fi
}

# Scan Python packages
scan_python_packages() {
    local report_file="$1"
    
    if command -v safety &>/dev/null; then
        log INFO "Scanning Python packages..."
        
        # Run safety check
        safety check --json > safety-report.json 2>/dev/null || true
        
        if [[ -f "safety-report.json" ]]; then
            jq '.vulnerabilities[] | {
                package: .package,
                severity: .severity,
                title: .vulnerability_id,
                description: .description,
                platform: "python",
                cve: .vulnerability_id,
                recommendation: "Update to version " + .installed_version,
                scan_date: "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' safety-report.json | jq -s '.' | \
            jq --argjson vulns - '.vulnerabilities += $vulns' "$report_file" > temp.json && \
            mv temp.json "$report_file"
            
            rm -f safety-report.json
        fi
    fi
    
    # Check for outdated packages
    if command -v pip &>/dev/null && [[ -f "requirements.txt" ]]; then
        log INFO "Checking Python package updates..."
        
        pip list --outdated --format=json 2>/dev/null | \
        jq -r '.[] | {
            package: .name,
            current: .version,
            latest: .latest_version,
            issue: "outdated_dependency",
            severity: "medium",
            platform: "python",
            recommendation: "Update to version " + .latest_version,
            scan_date: "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
        }' | jq -s '.' | \
        jq --argjson issues - '.dependency_issues += $issues' "$report_file" > temp.json && \
        mv temp.json "$report_file"
    fi
}

# Scan Rust packages
scan_rust_packages() {
    local report_file="$1"
    
    if command -v cargo-audit &>/dev/null && [[ -f "Cargo.toml" ]]; then
        log INFO "Scanning Rust packages..."
        
        # Run cargo audit
        cargo audit --json > cargo-audit.json 2>/dev/null || true
        
        if [[ -f "cargo-audit.json" ]]; then
            jq '.vulnerabilities.list[] | {
                package: .package.name,
                severity: .advisory.severity,
                title: .advisory.title,
                description: .advisory.description,
                platform: "rust",
                cve: .advisory.id,
                recommendation: "Update to version " + (.advisory.patched_versions[0] // "latest"),
                scan_date: "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' cargo-audit.json | jq -s '.' | \
            jq --argjson vulns - '.vulnerabilities += $vulns' "$report_file" > temp.json && \
            mv temp.json "$report_file"
            
            rm -f cargo-audit.json
        fi
    fi
}

# Scan Go packages
scan_go_packages() {
    local report_file="$1"
    
    if command -v gosec &>/dev/null && [[ -f "go.mod" ]]; then
        log INFO "Scanning Go packages..."
        
        # Run gosec
        gosec -fmt json -out gosec-report.json . 2>/dev/null || true
        
        if [[ -f "gosec-report.json" ]]; then
            jq '.Issues[] | {
                package: .file,
                severity: .severity,
                title: .rule_id,
                description: .details,
                platform: "go",
                cve: .cwe.id,
                recommendation: "Fix " + .rule_id + " in " + .file,
                scan_date: "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' gosec-report.json | jq -s '.' | \
            jq --argjson vulns - '.vulnerabilities += $vulns' "$report_file" > temp.json && \
            mv temp.json "$report_file"
            
            rm -f gosec-report.json
        fi
    fi
}

# Scan for secrets
scan_secrets() {
    local report_file="$1"
    
    log INFO "Scanning for secrets..."
    
    # Common secret patterns
    local secret_patterns=(
        "api_key.*=.*['\"][a-zA-Z0-9]{32,}['\"]"
        "password.*=.*['\"][^'\"]{8,}['\"]"
        "secret.*=.*['\"][a-zA-Z0-9]{16,}['\"]"
        "token.*=.*['\"][a-zA-Z0-9]{32,}['\"]"
        "private_key.*=.*['\"][a-zA-Z0-9]{64,}['\"]"
        "aws_access_key_id.*=.*['\"][A-Z0-9]{20}['\"]"
        "aws_secret_access_key.*=.*['\"][A-Za-z0-9/+=]{40}['\"]"
        "github_token.*=.*['\"][a-zA-Z0-9]{35,}['\"]"
        "slack_token.*=.*['\"][xoxb-][a-zA-Z0-9-]{1,}['\"]"
    )
    
    local secrets_found=()
    
    for pattern in "${secret_patterns[@]}"; do
        while IFS= read -r -d '' file; do
            if grep -qE "$pattern" "$file" 2>/dev/null; then
                local line=$(grep -nE "$pattern" "$file" | head -1)
                local line_num=$(echo "$line" | cut -d: -f1)
                local line_content=$(echo "$line" | cut -d: -f2- | sed 's/^[[:space:]]*//')
                
                secrets_found+=("{\"file\": \"$file\", \"line\": $line_num, \"content\": \"$line_content\", \"pattern\": \"$pattern\", \"severity\": \"high\", \"scan_date\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}")
            fi
        done < <(find . -type f \( -name "*.js" -o -name "*.py" -o -name "*.rb" -o -name "*.php" -o -name "*.java" -o -name "*.go" -o -name "*.rs" -o -name "*.json" -o -name "*.yaml" -o -name "*.yml" -o -name "*.env*" \) -print0 2>/dev/null)
    done
    
    # Add secrets to report
    if [[ ${#secrets_found[@]} -gt 0 ]]; then
        printf '%s\n' "${secrets_found[@]}" | jq -s '.' | \
        jq --argjson secrets - '.secrets = $secrets' "$report_file" > temp.json && \
        mv temp.json "$report_file"
    fi
}

# Scan licenses
scan_licenses() {
    local report_file="$1"
    
    log INFO "Scanning licenses..."
    
    local license_issues=()
    local policy_file="$PAK_CONFIG_DIR/security/license-policy.json"
    
    if [[ -f "$policy_file" ]]; then
        local restricted_licenses=$(jq -r '.restricted_licenses[]' "$policy_file" 2>/dev/null || echo "")
        
        # Check package.json licenses
        if [[ -f "package.json" ]]; then
            local license=$(jq -r '.license // empty' package.json 2>/dev/null || echo "")
            if [[ -n "$license" ]] && echo "$restricted_licenses" | grep -q "^$license$"; then
                license_issues+=("{\"package\": \"$(jq -r '.name' package.json)\", \"license\": \"$license\", \"issue\": \"restricted_license\", \"severity\": \"medium\", \"platform\": \"npm\", \"scan_date\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}")
            fi
        fi
        
        # Check Python licenses
        if [[ -f "setup.py" ]]; then
            local license=$(grep -E "license\s*=\s*['\"]" setup.py | grep -oE "[A-Za-z0-9.-]+" | head -1)
            if [[ -n "$license" ]] && echo "$restricted_licenses" | grep -q "^$license$"; then
                license_issues+=("{\"package\": \"$(grep -E "name\s*=\s*['\"]" setup.py | grep -oE "[A-Za-z0-9_-]+" | head -1)\", \"license\": \"$license\", \"issue\": \"restricted_license\", \"severity\": \"medium\", \"platform\": \"python\", \"scan_date\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}")
            fi
        fi
    fi
    
    # Add license issues to report
    if [[ ${#license_issues[@]} -gt 0 ]]; then
        printf '%s\n' "${license_issues[@]}" | jq -s '.' | \
        jq --argjson issues - '.license_issues = $issues' "$report_file" > temp.json && \
        mv temp.json "$report_file"
    fi
}

# Scan dependencies
scan_dependencies() {
    local report_file="$1"
    
    log INFO "Scanning dependencies..."
    
    # This is handled by platform-specific scanners
    # Additional dependency analysis can be added here
}

# Scan configurations
scan_configurations() {
    local report_file="$1"
    
    log INFO "Scanning configurations..."
    
    local config_issues=()
    
    # Check for common security misconfigurations
    if [[ -f ".env" ]]; then
        config_issues+=("{\"file\": \".env\", \"issue\": \"environment_file_exposed\", \"severity\": \"medium\", \"recommendation\": \"Move sensitive data to environment variables\", \"scan_date\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}")
    fi
    
    if [[ -f "docker-compose.yml" ]] && grep -q "password.*:" docker-compose.yml; then
        config_issues+=("{\"file\": \"docker-compose.yml\", \"issue\": \"hardcoded_password\", \"severity\": \"high\", \"recommendation\": \"Use environment variables for passwords\", \"scan_date\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}")
    fi
    
    if [[ -f ".gitignore" ]] && ! grep -q ".env" .gitignore; then
        config_issues+=("{\"file\": \".gitignore\", \"issue\": \"missing_env_ignore\", \"severity\": \"low\", \"recommendation\": \"Add .env to .gitignore\", \"scan_date\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}")
    fi
    
    # Add config issues to report
    if [[ ${#config_issues[@]} -gt 0 ]]; then
        printf '%s\n' "${config_issues[@]}" | jq -s '.' | \
        jq --argjson issues - '.configuration_issues = $issues' "$report_file" > temp.json && \
        mv temp.json "$report_file"
    fi
}

# Generate scan summary
generate_scan_summary() {
    local report_file="$1"
    
    # Count vulnerabilities by severity
    local critical=$(jq '.vulnerabilities | map(select(.severity == "critical")) | length' "$report_file")
    local high=$(jq '.vulnerabilities | map(select(.severity == "high")) | length' "$report_file")
    local medium=$(jq '.vulnerabilities | map(select(.severity == "medium")) | length' "$report_file")
    local low=$(jq '.vulnerabilities | map(select(.severity == "low")) | length' "$report_file")
    local total=$(jq '.vulnerabilities | length' "$report_file")
    
    # Update summary
    jq --argjson critical "$critical" --argjson high "$high" --argjson medium "$medium" --argjson low "$low" --argjson total "$total" \
       '.summary = {"critical": $critical, "high": $high, "medium": $medium, "low": $low, "total": $total}' "$report_file" > temp.json && \
    mv temp.json "$report_file"
    
    # Generate recommendations
    generate_recommendations "$report_file"
}

# Generate recommendations
generate_recommendations() {
    local report_file="$1"
    
    local recommendations=()
    
    # Get vulnerability counts
    local critical=$(jq '.summary.critical' "$report_file")
    local high=$(jq '.summary.high' "$report_file")
    local secrets_count=$(jq '.secrets | length' "$report_file")
    
    if [[ "$critical" -gt 0 ]]; then
        recommendations+=("{\"type\": \"critical_vulnerabilities\", \"priority\": \"high\", \"message\": \"Fix $critical critical vulnerabilities immediately\"}")
    fi
    
    if [[ "$high" -gt 0 ]]; then
        recommendations+=("{\"type\": \"high_vulnerabilities\", \"priority\": \"high\", \"message\": \"Address $high high severity vulnerabilities\"}")
    fi
    
    if [[ "$secrets_count" -gt 0 ]]; then
        recommendations+=("{\"type\": \"secrets_exposure\", \"priority\": \"critical\", \"message\": \"Remove $secrets_count exposed secrets from code\"}")
    fi
    
    # Add recommendations to report
    if [[ ${#recommendations[@]} -gt 0 ]]; then
        printf '%s\n' "${recommendations[@]}" | jq -s '.' | \
        jq --argjson recs - '.recommendations = $recs' "$report_file" > temp.json && \
        mv temp.json "$report_file"
    fi
}

# Output scan results
output_scan_results() {
    local report_file="$1"
    local output_format="$2"
    
    case "$output_format" in
        json)
            jq . "$report_file"
            ;;
        summary)
            jq '.summary' "$report_file"
            ;;
        html)
            generate_html_report "$report_file"
            ;;
        csv)
            generate_csv_report "$report_file"
            ;;
        *)
            jq . "$report_file"
            ;;
    esac
}

# Generate HTML report
generate_html_report() {
    local report_file="$1"
    local html_file="${report_file%.json}.html"
    
    cat > "$html_file" << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Vulnerability Scan Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #f0f0f0; padding: 20px; border-radius: 5px; }
        .summary { margin: 20px 0; }
        .vulnerability { border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }
        .critical { border-left: 5px solid #d32f2f; }
        .high { border-left: 5px solid #f57c00; }
        .medium { border-left: 5px solid #fbc02d; }
        .low { border-left: 5px solid #388e3c; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Vulnerability Scan Report</h1>
        <p>Generated: <span id="scan-date"></span></p>
    </div>
    
    <div class="summary">
        <h2>Summary</h2>
        <div id="summary-stats"></div>
    </div>
    
    <div class="vulnerabilities">
        <h2>Vulnerabilities</h2>
        <div id="vulnerability-list"></div>
    </div>
    
    <script>
        // Load and display report data
        fetch('scan-report.json')
            .then(response => response.json())
            .then(data => {
                document.getElementById('scan-date').textContent = data.scan_date;
                
                const summary = data.summary;
                document.getElementById('summary-stats').innerHTML = `
                    <p><strong>Critical:</strong> ${summary.critical}</p>
                    <p><strong>High:</strong> ${summary.high}</p>
                    <p><strong>Medium:</strong> ${summary.medium}</p>
                    <p><strong>Low:</strong> ${summary.low}</p>
                    <p><strong>Total:</strong> ${summary.total}</p>
                `;
                
                const vulnList = document.getElementById('vulnerability-list');
                data.vulnerabilities.forEach(vuln => {
                    const div = document.createElement('div');
                    div.className = `vulnerability ${vuln.severity}`;
                    div.innerHTML = `
                        <h3>${vuln.title}</h3>
                        <p><strong>Package:</strong> ${vuln.package}</p>
                        <p><strong>Severity:</strong> ${vuln.severity}</p>
                        <p><strong>Description:</strong> ${vuln.description}</p>
                        <p><strong>Recommendation:</strong> ${vuln.recommendation}</p>
                    `;
                    vulnList.appendChild(div);
                });
            });
    </script>
</body>
</html>
EOF
    
    echo "HTML report generated: $html_file"
}

# Generate CSV report
generate_csv_report() {
    local report_file="$1"
    local csv_file="${report_file%.json}.csv"
    
    # Create CSV header
    echo "Package,Severity,Title,Description,Platform,CVE,Recommendation" > "$csv_file"
    
    # Add vulnerability data
    jq -r '.vulnerabilities[] | [.package, .severity, .title, .description, .platform, .cve, .recommendation] | @csv' "$report_file" >> "$csv_file"
    
    echo "CSV report generated: $csv_file"
}

# Main function
main() {
    local action="${1:-scan}"
    local package_path="${2:-.}"
    local scan_type="${3:-comprehensive}"
    local output_format="${4:-json}"
    
    case "$action" in
        scan)
            init_scanner
            scan_package "$package_path" "$scan_type" "$output_format"
            ;;
        init)
            init_scanner
            ;;
        *)
            echo "Usage: $0 {scan|init} [package_path] [scan_type] [output_format]"
            echo "  scan_type: basic|comprehensive"
            echo "  output_format: json|summary|html|csv"
            exit 1
            ;;
    esac
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi 
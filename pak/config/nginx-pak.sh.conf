# PAK.sh Nginx Configuration Template
# Copy this to /etc/nginx/sites-available/pak.sh and customize

server {
    listen 80;
    listen [::]:80;
    server_name YOUR_DOMAIN.com www.YOUR_DOMAIN.com;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Root directory
    root /opt/pak/web;
    index index.html;

    # Logging
    access_log /var/log/nginx/pak.sh.access.log;
    error_log /var/log/nginx/pak.sh.error.log;

    # Rate limiting for webhook
    limit_req_zone $binary_remote_addr zone=webhook:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=telemetry:10m rate=30r/s;

    # Handle static files
    location / {
        try_files $uri $uri/ =404;
        
        # Cache static files
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Cache JSON and text files for shorter time
        location ~* \.(json|txt|md)$ {
            expires 1h;
            add_header Cache-Control "public";
        }
    }

    # PHP routing system - handle h1, h2, h3, h4, h5 parameters
    location ~ ^/([^/]+)$ {
        try_files $uri $uri/ @php_routing;
    }
    
    location ~ ^/([^/]+)/([^/]+)$ {
        try_files $uri $uri/ @php_routing;
    }
    
    location ~ ^/([^/]+)/([^/]+)/([^/]+)$ {
        try_files $uri $uri/ @php_routing;
    }
    
    location ~ ^/([^/]+)/([^/]+)/([^/]+)/([^/]+)$ {
        try_files $uri $uri/ @php_routing;
    }
    
    location ~ ^/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)$ {
        try_files $uri $uri/ @php_routing;
    }
    
    # PHP routing handler
    location @php_routing {
        include fastcgi_params;
        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
        fastcgi_param SCRIPT_FILENAME $document_root/index.php;
        fastcgi_param PATH_INFO $uri;
        fastcgi_param QUERY_STRING $args;
        
        # Extract h1-h5 parameters from URI
        if ($uri ~ "^/([^/]+)$") {
            set $h1 $1;
        }
        if ($uri ~ "^/([^/]+)/([^/]+)$") {
            set $h1 $1;
            set $h2 $2;
        }
        if ($uri ~ "^/([^/]+)/([^/]+)/([^/]+)$") {
            set $h1 $1;
            set $h2 $2;
            set $h3 $3;
        }
        if ($uri ~ "^/([^/]+)/([^/]+)/([^/]+)/([^/]+)$") {
            set $h1 $1;
            set $h2 $2;
            set $h3 $3;
            set $h4 $4;
        }
        if ($uri ~ "^/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)$") {
            set $h1 $1;
            set $h2 $2;
            set $h3 $3;
            set $h4 $4;
            set $h5 $5;
        }
        
        fastcgi_param H1 $h1;
        fastcgi_param H2 $h2;
        fastcgi_param H3 $h3;
        fastcgi_param H4 $h4;
        fastcgi_param H5 $h5;
    }

    # Handle install script specifically
    location = /install {
        alias /opt/pak/web/install.sh;
        add_header Content-Type "text/plain";
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Handle install.sh script
    location = /install.sh {
        alias /opt/pak/web/install.sh;
        add_header Content-Type "text/plain";
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Handle manifest.json
    location = /manifest.json {
        alias /opt/pak/web/manifest.json;
        add_header Content-Type "application/json";
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Handle latest.tar.gz
    location = /latest.tar.gz {
        alias /opt/pak/web/latest.tar.gz;
        add_header Content-Type "application/gzip";
        add_header Content-Disposition "attachment; filename=latest.tar.gz";
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Handle telemetry webhook with API key authentication
    location = /webhook/telemetry {
        limit_req zone=webhook burst=20 nodelay;
        
        # API key authentication
        if ($http_x_api_key != "YOUR_API_KEY_HERE") {
            return 401;
        }
        
        alias /opt/pak/web/webhook-telemetry.php;
        add_header Content-Type "application/json";
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Telemetry dashboard is now handled by h1 routing at /telemetry
    # (uses PakHerd authentication instead of basic auth)

    # Handle telemetry API endpoints
    location ~ ^/api/telemetry/(.*)$ {
        limit_req zone=telemetry burst=50 nodelay;
        
        # API key authentication
        if ($http_x_api_key != "YOUR_API_KEY_HERE") {
            return 401;
        }
        
        alias /opt/pak/web/api-telemetry.php;
        add_header Content-Type "application/json";
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Handle admin endpoints (if needed)
    location ~ ^/admin/(.*)$ {
        auth_basic "PAK.sh Admin";
        auth_basic_user_file /opt/pak/config/.htpasswd;
        
        alias /opt/pak/web/admin/$1;
        add_header Content-Type "application/json";
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny access to backup files
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny access to config files
    location ~ /config/ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
}

# HTTPS configuration (uncomment and configure SSL)
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name YOUR_DOMAIN.com www.YOUR_DOMAIN.com;
#     
#     ssl_certificate /etc/letsencrypt/live/YOUR_DOMAIN.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/YOUR_DOMAIN.com/privkey.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     
#     # Include the same location blocks as above
#     # ... (copy all location blocks from the HTTP server)
# }

# Redirect HTTP to HTTPS (uncomment when SSL is configured)
# server {
#     listen 80;
#     listen [::]:80;
#     server_name YOUR_DOMAIN.com www.YOUR_DOMAIN.com;
#     return 301 https://$server_name$request_uri;
# } 
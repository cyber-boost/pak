{
  "platforms": {
    "npm": {
      "name": "npm",
      "type": "javascript",
      "language": "javascript",
      "registry": "https://registry.npmjs.org",
      "api": "https://api.npmjs.org",
      "health_endpoint": "https://registry.npmjs.org/-/ping",
      "commands": {
        "publish": "npm publish",
        "info": "npm view {package}",
        "versions": "npm view {package} versions",
        "install": "npm install",
        "build": "npm run build",
        "test": "npm test"
      },
      "files": {
        "required": ["package.json"],
        "optional": ["README.md", "LICENSE", ".npmignore", "tsconfig.json"]
      },
      "authentication": {
        "type": "token",
        "env_var": "NPM_TOKEN",
        "config_key": "//registry.npmjs.org/:_authToken"
      },
      "version_management": {
        "file": "package.json",
        "field": "version",
        "update_command": "npm version {version} --no-git-tag-version"
      },
      "deployment": {
        "pre_hooks": ["npm install", "npm test", "npm run build"],
        "publish_flags": ["--access", "public"],
        "rollback_support": true
      },
      "monitoring": {
        "download_stats": "https://api.npmjs.org/downloads/point/last-month/{package}",
        "version_stats": "https://api.npmjs.org/downloads/range/last-week/{package}"
      }
    },
    "yarn": {
      "name": "yarn",
      "type": "javascript",
      "language": "javascript",
      "registry": "https://registry.yarnpkg.com",
      "api": "https://api.npmjs.org",
      "health_endpoint": "https://registry.yarnpkg.com/-/ping",
      "commands": {
        "publish": "yarn publish",
        "info": "yarn info {package}",
        "versions": "yarn info {package} versions",
        "install": "yarn install",
        "build": "yarn build",
        "test": "yarn test"
      },
      "files": {
        "required": ["package.json"],
        "optional": ["README.md", "LICENSE", ".yarnignore", "yarn.lock"]
      },
      "authentication": {
        "type": "token",
        "env_var": "NPM_TOKEN",
        "config_key": "//registry.npmjs.org/:_authToken"
      },
      "version_management": {
        "file": "package.json",
        "field": "version",
        "update_command": "yarn version --new-version {version} --no-git-tag"
      },
      "deployment": {
        "pre_hooks": ["yarn install", "yarn test", "yarn build"],
        "publish_flags": ["--access", "public"],
        "rollback_support": true
      }
    },
    "jsr": {
      "name": "jsr",
      "type": "javascript",
      "language": "typescript",
      "registry": "https://jsr.io",
      "api": "https://jsr.io/api",
      "health_endpoint": "https://jsr.io/api/health",
      "commands": {
        "publish": "jsr publish",
        "info": "jsr info {package}",
        "versions": "jsr info {package} --versions",
        "install": "jsr install",
        "build": "deno run --allow-all build.ts",
        "test": "deno test"
      },
      "files": {
        "required": ["deno.json", "mod.ts"],
        "optional": ["README.md", "LICENSE", "deps.ts"]
      },
      "authentication": {
        "type": "token",
        "env_var": "JSR_TOKEN",
        "config_key": "jsr_token"
      },
      "version_management": {
        "file": "deno.json",
        "field": "version",
        "update_command": "deno run --allow-all scripts/update-version.ts {version}"
      },
      "deployment": {
        "pre_hooks": ["deno install", "deno test", "deno run --allow-all build.ts"],
        "publish_flags": [],
        "rollback_support": true
      }
    },
    "pypi": {
      "name": "pypi",
      "type": "python",
      "language": "python",
      "registry": "https://pypi.org",
      "api": "https://pypi.org/pypi/{package}/json",
      "health_endpoint": "https://pypi.org/health",
      "commands": {
        "publish": "twine upload dist/*",
        "info": "pip show {package}",
        "versions": "pip index versions {package}",
        "install": "pip install -e .",
        "build": "python -m build",
        "test": "python -m pytest"
      },
      "files": {
        "required": ["setup.py", "pyproject.toml"],
        "optional": ["README.md", "LICENSE", "MANIFEST.in", "requirements.txt"]
      },
      "authentication": {
        "type": "token",
        "env_var": "PYPI_TOKEN",
        "config_key": "pypi_token"
      },
      "version_management": {
        "file": "pyproject.toml",
        "field": "version",
        "update_command": "poetry version {version}"
      },
      "deployment": {
        "pre_hooks": ["pip install -e .", "python -m pytest", "python -m build"],
        "publish_flags": [],
        "rollback_support": true
      }
    },
    "cargo": {
      "name": "cargo",
      "type": "rust",
      "language": "rust",
      "registry": "https://crates.io",
      "api": "https://crates.io/api/v1/crates/{package}",
      "health_endpoint": "https://crates.io/api/v1/summary",
      "commands": {
        "publish": "cargo publish",
        "info": "cargo search {package}",
        "versions": "cargo search {package} --limit 100",
        "install": "cargo build",
        "build": "cargo build --release",
        "test": "cargo test"
      },
      "files": {
        "required": ["Cargo.toml", "src/lib.rs"],
        "optional": ["README.md", "LICENSE", "Cargo.lock"]
      },
      "authentication": {
        "type": "token",
        "env_var": "CARGO_TOKEN",
        "config_key": "cargo_token"
      },
      "version_management": {
        "file": "Cargo.toml",
        "field": "version",
        "update_command": "cargo set-version {version}"
      },
      "deployment": {
        "pre_hooks": ["cargo build", "cargo test", "cargo build --release"],
        "publish_flags": [],
        "rollback_support": true
      }
    },
    "dockerhub": {
      "name": "dockerhub",
      "type": "container",
      "language": "docker",
      "registry": "https://hub.docker.com",
      "api": "https://hub.docker.com/v2/repositories/{package}",
      "health_endpoint": "https://hub.docker.com/v2/",
      "commands": {
        "publish": "docker push {package}:{version}",
        "info": "docker inspect {package}",
        "versions": "docker images {package}",
        "install": "docker pull {package}",
        "build": "docker build -t {package}:{version} .",
        "test": "docker run --rm {package}:{version} test"
      },
      "files": {
        "required": ["Dockerfile"],
        "optional": ["README.md", "LICENSE", ".dockerignore", "docker-compose.yml"]
      },
      "authentication": {
        "type": "login",
        "env_var": "DOCKER_USERNAME",
        "password_var": "DOCKER_PASSWORD",
        "login_command": "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
      },
      "version_management": {
        "file": "Dockerfile",
        "field": "LABEL version",
        "update_command": "sed -i 's/LABEL version=\".*\"/LABEL version=\"{version}\"/' Dockerfile"
      },
      "deployment": {
        "pre_hooks": ["docker build -t {package}:{version} .", "docker run --rm {package}:{version} test"],
        "publish_flags": [],
        "rollback_support": true
      }
    },
    "maven": {
      "name": "maven",
      "type": "java",
      "language": "java",
      "registry": "https://repo1.maven.org/maven2",
      "api": "https://search.maven.org/solrsearch/select?q=g:{group}+AND+a:{artifact}",
      "health_endpoint": "https://repo1.maven.org/maven2/",
      "commands": {
        "publish": "mvn deploy",
        "info": "mvn dependency:get -Dartifact={package}",
        "versions": "mvn versions:display-dependency-updates",
        "install": "mvn install",
        "build": "mvn clean package",
        "test": "mvn test"
      },
      "files": {
        "required": ["pom.xml"],
        "optional": ["README.md", "LICENSE", "src/"]
      },
      "authentication": {
        "type": "settings",
        "env_var": "MAVEN_SETTINGS",
        "config_file": "~/.m2/settings.xml"
      },
      "version_management": {
        "file": "pom.xml",
        "field": "version",
        "update_command": "mvn versions:set -DnewVersion={version}"
      },
      "deployment": {
        "pre_hooks": ["mvn install", "mvn test", "mvn clean package"],
        "publish_flags": [],
        "rollback_support": false
      }
    },
    "composer": {
      "name": "composer",
      "type": "php",
      "language": "php",
      "registry": "https://packagist.org",
      "api": "https://packagist.org/packages/{package}.json",
      "health_endpoint": "https://packagist.org/",
      "commands": {
        "publish": "composer publish",
        "info": "composer show {package}",
        "versions": "composer show {package} --all",
        "install": "composer install",
        "build": "composer build",
        "test": "composer test"
      },
      "files": {
        "required": ["composer.json"],
        "optional": ["README.md", "LICENSE", "src/"]
      },
      "authentication": {
        "type": "token",
        "env_var": "PACKAGIST_TOKEN",
        "config_key": "packagist_token"
      },
      "version_management": {
        "file": "composer.json",
        "field": "version",
        "update_command": "composer version {version}"
      },
      "deployment": {
        "pre_hooks": ["composer install", "composer test", "composer build"],
        "publish_flags": [],
        "rollback_support": false
      }
    },
    "conda": {
      "name": "conda",
      "type": "python",
      "language": "python",
      "registry": "https://anaconda.org",
      "api": "https://api.anaconda.org/package/{package}",
      "health_endpoint": "https://api.anaconda.org/health",
      "commands": {
        "publish": "anaconda upload dist/*",
        "info": "conda search {package}",
        "versions": "conda search {package} --info",
        "install": "conda install {package}",
        "build": "conda build .",
        "test": "conda build --test ."
      },
      "files": {
        "required": ["meta.yaml", "build.sh"],
        "optional": ["README.md", "LICENSE", "recipe/"]
      },
      "authentication": {
        "type": "token",
        "env_var": "ANACONDA_TOKEN",
        "config_key": "anaconda_token"
      },
      "deployment": {
        "pre_hooks": ["conda build .", "conda build --test ."],
        "publish_flags": [],
        "rollback_support": false
      }
    },
    "nuget": {
      "name": "nuget",
      "type": "dotnet",
      "language": "csharp",
      "registry": "https://www.nuget.org",
      "api": "https://api.nuget.org/v3/registration3/{package}/index.json",
      "health_endpoint": "https://api.nuget.org/v3/index.json",
      "commands": {
        "publish": "dotnet nuget push {package}.{version}.nupkg",
        "info": "dotnet list package",
        "versions": "dotnet list package --outdated",
        "install": "dotnet restore",
        "build": "dotnet build",
        "test": "dotnet test"
      },
      "files": {
        "required": ["*.csproj"],
        "optional": ["README.md", "LICENSE", "*.sln"]
      },
      "authentication": {
        "type": "token",
        "env_var": "NUGET_TOKEN",
        "config_key": "nuget_token"
      },
      "deployment": {
        "pre_hooks": ["dotnet restore", "dotnet test", "dotnet build"],
        "publish_flags": [],
        "rollback_support": false
      }
    },
    "helm": {
      "name": "helm",
      "type": "kubernetes",
      "language": "yaml",
      "registry": "https://charts.helm.sh",
      "api": "https://charts.helm.sh/api",
      "health_endpoint": "https://charts.helm.sh/health",
      "commands": {
        "publish": "helm push {package} {registry}",
        "info": "helm show chart {package}",
        "versions": "helm search repo {package} --versions",
        "install": "helm install {package}",
        "build": "helm package .",
        "test": "helm test {package}"
      },
      "files": {
        "required": ["Chart.yaml", "values.yaml"],
        "optional": ["README.md", "LICENSE", "templates/"]
      },
      "authentication": {
        "type": "token",
        "env_var": "HELM_TOKEN",
        "config_key": "helm_token"
      },
      "deployment": {
        "pre_hooks": ["helm lint .", "helm package ."],
        "publish_flags": [],
        "rollback_support": true
      }
    },
    "terraform": {
      "name": "terraform",
      "type": "infrastructure",
      "language": "hcl",
      "registry": "https://registry.terraform.io",
      "api": "https://registry.terraform.io/v1/modules/{package}",
      "health_endpoint": "https://registry.terraform.io/v1/",
      "commands": {
        "publish": "terraform publish",
        "info": "terraform show",
        "versions": "terraform version",
        "install": "terraform init",
        "build": "terraform plan",
        "test": "terraform validate"
      },
      "files": {
        "required": ["main.tf", "variables.tf"],
        "optional": ["README.md", "LICENSE", "outputs.tf"]
      },
      "authentication": {
        "type": "token",
        "env_var": "TF_TOKEN",
        "config_key": "terraform_token"
      },
      "deployment": {
        "pre_hooks": ["terraform init", "terraform validate", "terraform plan"],
        "publish_flags": [],
        "rollback_support": true
      }
    }
  },
  "default_platforms": ["npm", "pypi", "cargo"],
  "staging_platforms": ["npm", "pypi"],
  "production_platforms": ["npm", "pypi", "cargo", "dockerhub", "maven", "composer"],
  "parallel_deployment": {
    "enabled": true,
    "max_concurrent": 5,
    "timeout": 300
  },
  "rollback": {
    "enabled": true,
    "automatic_on_failure": true,
    "manual_confirmation": false
  },
  "monitoring": {
    "health_check_interval": 300,
    "deployment_timeout": 600,
    "verification_timeout": 120
  }
} 